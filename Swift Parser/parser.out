Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    QUOTE
    TRUE
    NIL
    FALSE

Grammar

Rule 0     S' -> item
Rule 1     item -> PRINT LPAREN item RPAREN
Rule 2     item -> LET item = item
Rule 3     item -> item = item
Rule 4     item -> VAR item = item
Rule 5     item -> TEXT
Rule 6     item -> SIMB
Rule 7     item -> NUM

Terminals, with rules where they appear

=                    : 2 3 4
FALSE                : 
LET                  : 2
LPAREN               : 1
NIL                  : 
NUM                  : 7
PRINT                : 1
QUOTE                : 
RPAREN               : 1
SIMB                 : 6
TEXT                 : 5
TRUE                 : 
VAR                  : 4
error                : 

Nonterminals, with rules where they appear

item                 : 1 2 2 3 3 4 4 0

Parsing method: LALR

state 0

    (0) S' -> . item
    (1) item -> . PRINT LPAREN item RPAREN
    (2) item -> . LET item = item
    (3) item -> . item = item
    (4) item -> . VAR item = item
    (5) item -> . TEXT
    (6) item -> . SIMB
    (7) item -> . NUM

    PRINT           shift and go to state 1
    LET             shift and go to state 7
    VAR             shift and go to state 3
    TEXT            shift and go to state 5
    SIMB            shift and go to state 6
    NUM             shift and go to state 4

    item                           shift and go to state 2

state 1

    (1) item -> PRINT . LPAREN item RPAREN

    LPAREN          shift and go to state 8


state 2

    (0) S' -> item .
    (3) item -> item . = item

    =               shift and go to state 9


state 3

    (4) item -> VAR . item = item
    (1) item -> . PRINT LPAREN item RPAREN
    (2) item -> . LET item = item
    (3) item -> . item = item
    (4) item -> . VAR item = item
    (5) item -> . TEXT
    (6) item -> . SIMB
    (7) item -> . NUM

    PRINT           shift and go to state 1
    LET             shift and go to state 7
    VAR             shift and go to state 3
    TEXT            shift and go to state 5
    SIMB            shift and go to state 6
    NUM             shift and go to state 4

    item                           shift and go to state 10

state 4

    (7) item -> NUM .

    =               reduce using rule 7 (item -> NUM .)
    RPAREN          reduce using rule 7 (item -> NUM .)
    $end            reduce using rule 7 (item -> NUM .)


state 5

    (5) item -> TEXT .

    =               reduce using rule 5 (item -> TEXT .)
    RPAREN          reduce using rule 5 (item -> TEXT .)
    $end            reduce using rule 5 (item -> TEXT .)


state 6

    (6) item -> SIMB .

    =               reduce using rule 6 (item -> SIMB .)
    RPAREN          reduce using rule 6 (item -> SIMB .)
    $end            reduce using rule 6 (item -> SIMB .)


state 7

    (2) item -> LET . item = item
    (1) item -> . PRINT LPAREN item RPAREN
    (2) item -> . LET item = item
    (3) item -> . item = item
    (4) item -> . VAR item = item
    (5) item -> . TEXT
    (6) item -> . SIMB
    (7) item -> . NUM

    PRINT           shift and go to state 1
    LET             shift and go to state 7
    VAR             shift and go to state 3
    TEXT            shift and go to state 5
    SIMB            shift and go to state 6
    NUM             shift and go to state 4

    item                           shift and go to state 11

state 8

    (1) item -> PRINT LPAREN . item RPAREN
    (1) item -> . PRINT LPAREN item RPAREN
    (2) item -> . LET item = item
    (3) item -> . item = item
    (4) item -> . VAR item = item
    (5) item -> . TEXT
    (6) item -> . SIMB
    (7) item -> . NUM

    PRINT           shift and go to state 1
    LET             shift and go to state 7
    VAR             shift and go to state 3
    TEXT            shift and go to state 5
    SIMB            shift and go to state 6
    NUM             shift and go to state 4

    item                           shift and go to state 12

state 9

    (3) item -> item = . item
    (1) item -> . PRINT LPAREN item RPAREN
    (2) item -> . LET item = item
    (3) item -> . item = item
    (4) item -> . VAR item = item
    (5) item -> . TEXT
    (6) item -> . SIMB
    (7) item -> . NUM

    PRINT           shift and go to state 1
    LET             shift and go to state 7
    VAR             shift and go to state 3
    TEXT            shift and go to state 5
    SIMB            shift and go to state 6
    NUM             shift and go to state 4

    item                           shift and go to state 13

state 10

    (4) item -> VAR item . = item
    (3) item -> item . = item

    =               shift and go to state 14


state 11

    (2) item -> LET item . = item
    (3) item -> item . = item

    =               shift and go to state 15


state 12

    (1) item -> PRINT LPAREN item . RPAREN
    (3) item -> item . = item

    RPAREN          shift and go to state 16
    =               shift and go to state 9


state 13

    (3) item -> item = item .
    (3) item -> item . = item

  ! shift/reduce conflict for = resolved as shift
    RPAREN          reduce using rule 3 (item -> item = item .)
    $end            reduce using rule 3 (item -> item = item .)
    =               shift and go to state 9

  ! =               [ reduce using rule 3 (item -> item = item .) ]


state 14

    (4) item -> VAR item = . item
    (3) item -> item = . item
    (1) item -> . PRINT LPAREN item RPAREN
    (2) item -> . LET item = item
    (3) item -> . item = item
    (4) item -> . VAR item = item
    (5) item -> . TEXT
    (6) item -> . SIMB
    (7) item -> . NUM

    PRINT           shift and go to state 1
    LET             shift and go to state 7
    VAR             shift and go to state 3
    TEXT            shift and go to state 5
    SIMB            shift and go to state 6
    NUM             shift and go to state 4

    item                           shift and go to state 17

state 15

    (2) item -> LET item = . item
    (3) item -> item = . item
    (1) item -> . PRINT LPAREN item RPAREN
    (2) item -> . LET item = item
    (3) item -> . item = item
    (4) item -> . VAR item = item
    (5) item -> . TEXT
    (6) item -> . SIMB
    (7) item -> . NUM

    PRINT           shift and go to state 1
    LET             shift and go to state 7
    VAR             shift and go to state 3
    TEXT            shift and go to state 5
    SIMB            shift and go to state 6
    NUM             shift and go to state 4

    item                           shift and go to state 18

state 16

    (1) item -> PRINT LPAREN item RPAREN .

    =               reduce using rule 1 (item -> PRINT LPAREN item RPAREN .)
    RPAREN          reduce using rule 1 (item -> PRINT LPAREN item RPAREN .)
    $end            reduce using rule 1 (item -> PRINT LPAREN item RPAREN .)


state 17

    (4) item -> VAR item = item .
    (3) item -> item = item .
    (3) item -> item . = item

  ! reduce/reduce conflict for = resolved using rule 3 (item -> item = item .)
  ! shift/reduce conflict for = resolved as shift
    RPAREN          reduce using rule 4 (item -> VAR item = item .)
    $end            reduce using rule 4 (item -> VAR item = item .)
    =               shift and go to state 9

  ! =               [ reduce using rule 4 (item -> VAR item = item .) ]
  ! =               [ reduce using rule 3 (item -> item = item .) ]


state 18

    (2) item -> LET item = item .
    (3) item -> item = item .
    (3) item -> item . = item

  ! reduce/reduce conflict for = resolved using rule 2 (item -> LET item = item .)
  ! shift/reduce conflict for = resolved as shift
    RPAREN          reduce using rule 2 (item -> LET item = item .)
    $end            reduce using rule 2 (item -> LET item = item .)
    =               shift and go to state 9

  ! =               [ reduce using rule 2 (item -> LET item = item .) ]
  ! =               [ reduce using rule 3 (item -> item = item .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for = in state 13 resolved as shift
WARNING: shift/reduce conflict for = in state 17 resolved as shift
WARNING: shift/reduce conflict for = in state 18 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (item -> item = item)
WARNING: rejected rule (item -> VAR item = item) in state 17
WARNING: reduce/reduce conflict in state 18 resolved using rule (item -> LET item = item)
WARNING: rejected rule (item -> item = item) in state 18
